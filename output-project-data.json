{
  "appFiles": {
    "src": {"name": "src", "type": "folder"},
    "src/components": {"name": "components", "type": "folder"},
    "src/hooks": {"name": "hooks", "type": "folder"},
    "src/types": {"name": "types", "type": "folder"},
    "src/store": {"name": "store", "type": "folder"},
    "src/data": {"name": "data", "type": "folder"},
    "src/utils": {"name": "utils", "type": "folder"},
    "package.json": {"name": "package.json", "type": "file", "contents": "{\n  \"name\": \"modern-task-manager\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"zustand\": \"^4.5.2\",\n    \"@tanstack/react-query\": \"^5.28.0\",\n    \"framer-motion\": \"^11.0.17\",\n    \"lucide-react\": \"^0.367.0\",\n    \"clsx\": \"^2.1.1\",\n    \"react-hot-toast\": \"^2.4.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.3.5\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"typescript\": \"^5.5.3\",\n    \"vite\": \"^5.4.2\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"autoprefixer\": \"^10.4.18\",\n    \"postcss\": \"^8.4.35\"\n  }\n}", "fullPath": "package.json"},
    "postcss.config.js": {"name": "postcss.config.js", "type": "file", "contents": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};", "fullPath": "postcss.config.js"},
    "tailwind.config.js": {"name": "tailwind.config.js", "type": "file", "contents": "/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8'\n        }\n      }\n    }\n  },\n  plugins: []\n};", "fullPath": "tailwind.config.js"},
    "vite.config.ts": {"name": "vite.config.ts", "type": "file", "contents": "import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [react()]\n});", "fullPath": "vite.config.ts"},
    "tsconfig.json": {"name": "tsconfig.json", "type": "file", "contents": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}", "fullPath": "tsconfig.json"},
    "tsconfig.node.json": {"name": "tsconfig.node.json", "type": "file", "contents": "{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"skipLibCheck\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}", "fullPath": "tsconfig.node.json"},
    "index.html": {"name": "index.html", "type": "file", "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Modern Task Manager</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>", "fullPath": "index.html"},
    "src/main.tsx": {"name": "main.tsx", "type": "file", "contents": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { Toaster } from 'react-hot-toast';\nimport App from './App';\nimport './index.css';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000,\n      retry: 1\n    }\n  }\n});\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n      <Toaster position=\"top-right\" />\n    </QueryClientProvider>\n  </StrictMode>\n);", "fullPath": "src/main.tsx"},
    "src/index.css": {"name": "index.css", "type": "file", "contents": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-gray-50 text-gray-900;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200;\n  }\n  .btn-secondary {\n    @apply bg-white hover:bg-gray-50 text-gray-900 border border-gray-300 px-4 py-2 rounded-lg font-medium transition-colors duration-200;\n  }\n  .card {\n    @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6;\n  }\n}", "fullPath": "src/index.css"},
    "src/App.tsx": {"name": "App.tsx", "type": "file", "contents": "import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Header } from './components/Header';\nimport { TaskList } from './components/TaskList';\nimport { TaskDrawer } from './components/TaskDrawer';\nimport { AuthModal } from './components/AuthModal';\nimport { useAuthStore } from './store/authStore';\nimport { useTaskStore } from './store/taskStore';\n\nfunction App() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isTaskOpen, setIsTaskOpen] = useState(false);\n  const [isAuthOpen, setIsAuthOpen] = useState(false);\n  const { user } = useAuthStore();\n  const { tasks } = useTaskStore();\n\n  const completedTasks = tasks.filter(task => task.completed).length;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header\n        searchQuery={searchQuery}\n        onSearchChange={setSearchQuery}\n        completedTasks={completedTasks}\n        onTaskClick={() => setIsTaskOpen(true)}\n        onAuthClick={() => setIsAuthOpen(true)}\n        user={user}\n      />\n      \n      <motion.main\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"container mx-auto px-4 py-8\"\n      >\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Manage Your Tasks Efficiently\n          </h1>\n          <p className=\"text-gray-600\">\n            Stay organized and never miss a deadline\n          </p>\n        </div>\n        \n        <TaskList searchQuery={searchQuery} />\n      </motion.main>\n      \n      <TaskDrawer\n        isOpen={isTaskOpen}\n        onClose={() => setIsTaskOpen(false)}\n      />\n      \n      <AuthModal\n        isOpen={isAuthOpen}\n        onClose={() => setIsAuthOpen(false)}\n      />\n    </div>\n  );\n}\n\nexport default App;", "fullPath": "src/App.tsx"},
    "src/types/index.ts": {"name": "index.ts", "type": "file", "contents": "export interface Task {\n  id: string;\n  title: string;\n  description: string;\n  completed: boolean;\n  createdAt: string;\n  updatedAt: string;\n  dueDate?: string;\n  priority?: 'low' | 'medium' | 'high';\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n}\n\nexport interface AuthState {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, name: string) => Promise<void>;\n  logout: () => void;\n}\n\nexport interface TaskState {\n  tasks: Task[];\n  addTask: (task: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>) => void;\n  updateTask: (taskId: string, updates: Partial<Task>) => void;\n  deleteTask: (taskId: string) => void;\n  completeTask: (taskId: string) => void;\n  clearCompleted: () => void;\n}", "fullPath": "src/types/index.ts"},
    "src/store/authStore.ts": {"name": "authStore.ts", "type": "file", "contents": "import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { AuthState, User } from '../types';\nimport toast from 'react-hot-toast';\n\nconst mockUsers: User[] = [\n  {\n    id: '1',\n    email: 'demo@example.com',\n    name: 'Demo User',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'\n  }\n];\n\nexport const useAuthStore = create<AuthState>()(persist(\n  (set, get) => ({\n    user: null,\n    isLoading: false,\n    \n    login: async (email: string, password: string) => {\n      set({ isLoading: true });\n      \n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        const user = mockUsers.find(u => u.email === email);\n        if (user && password === 'password') {\n          set({ user, isLoading: false });\n          toast.success(`Welcome back, ${user.name}!`);\n        } else {\n          throw new Error('Invalid credentials');\n        }\n      } catch (error) {\n        set({ isLoading: false });\n        toast.error('Invalid email or password');\n        throw error;\n      }\n    },\n    \n    register: async (email: string, password: string, name: string) => {\n      set({ isLoading: true });\n      \n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        const newUser: User = {\n          id: Date.now().toString(),\n          email,\n          name,\n          avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'\n        };\n        \n        mockUsers.push(newUser);\n        set({ user: newUser, isLoading: false });\n        toast.success(`Account created successfully! Welcome, ${name}!`);\n      } catch (error) {\n        set({ isLoading: false });\n        toast.error('Registration failed. Please try again.');\n        throw error;\n      }\n    },\n    \n    logout: () => {\n      set({ user: null });\n      toast.success('Logged out successfully');\n    }\n  }),\n  {\n    name: 'auth-storage',\n    partialize: (state) => ({ user: state.user })\n  }\n));", "fullPath": "src/store/authStore.ts"},
    "src/store/taskStore.ts": {"name": "taskStore.ts", "type": "file", "contents": "import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { TaskState, Task } from '../types';\nimport toast from 'react-hot-toast';\n\nexport const useTaskStore = create<TaskState>()(persist(\n  (set, get) => ({\n    tasks: [],\n    \n    addTask: (task: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>) => {\n      const newTask: Task = {\n        ...task,\n        id: Date.now().toString(),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      set({ tasks: [...get().tasks, newTask] });\n      toast.success(`Task "${task.title}" added`);\n    },\n    \n    updateTask: (taskId: string, updates: Partial<Task>) => {\n      set({\n        tasks: get().tasks.map(task =>\n          task.id === taskId ? { ...task, ...updates, updatedAt: new Date().toISOString() } : task\n        )\n      });\n      toast.success(`Task updated`);\n    },\n    \n    deleteTask: (taskId: string) => {\n      set({ tasks: get().tasks.filter(task => task.id !== taskId) });\n      toast.success(`Task deleted`);\n    },\n    \n    completeTask: (taskId: string) => {\n      set({\n        tasks: get().tasks.map(task =>\n          task.id === taskId ? { ...task, completed: !task.completed, updatedAt: new Date().toISOString() } : task\n        )\n      });\n      toast.success(`Task status updated`);\n    },\n    \n    clearCompleted: () => {\n      set({ tasks: get().tasks.filter(task => !task.completed) });\n      toast.success(`Completed tasks cleared`);\n    }\n  }),\n  {\n    name: 'task-storage',\n    partialize: (state) => ({ tasks: state.tasks })\n  }\n));", "fullPath": "src/store/taskStore.ts"},
    "src/data/tasks.ts": {"name": "tasks.ts", "type": "file", "contents": "import { Task } from '../types';\n\nexport const tasks: Task[] = [\n  {\n    id: '1',\n    title: 'Design the app logo',\n    description: 'Create a modern and sleek logo for the task management app.',\n    completed: false,\n    createdAt: '2023-10-01T10:00:00Z',\n    updatedAt: '2023-10-01T10:00:00Z',\n    dueDate: '2023-10-10',\n    priority: 'high'\n  },\n  {\n    id: '2',\n    title: 'Develop the authentication module',\n    description: 'Implement login, registration, and password recovery features.',\n    completed: false,\n    createdAt: '2023-10-02T11:00:00Z',\n    updatedAt: '2023-10-02T11:00:00Z',\n    dueDate: '2023-10-15',\n    priority: 'high'\n  },\n  {\n    id: '3',\n    title: 'Set up the database',\n    description: 'Configure MongoDB or PostgreSQL for storing user and task data.',\n    completed: false,\n    createdAt: '2023-10-03T12:00:00Z',\n    updatedAt: '2023-10-03T12:00:00Z',\n    dueDate: '2023-10-12',\n    priority: 'medium'\n  },\n  {\n    id: '4',\n    title: 'Create the task API',\n    description: 'Build RESTful API endpoints for tasks: CRUD operations.',\n    completed: false,\n    createdAt: '2023-10-04T13:00:00Z',\n    updatedAt: '2023-10-04T13:00:00Z',\n    dueDate: '2023-10-20',\n    priority: 'medium'\n  },\n  {\n    id: '5',\n    title: 'Implement task scheduling',\n    description: 'Allow users to set due dates and reminders for tasks.',\n    completed: false,\n    createdAt: '2023-10-05T14:00:00Z',\n    updatedAt: '2023-10-05T14:00:00Z',\n    dueDate: '2023-10-25',\n    priority: 'low'\n  },\n  {\n    id: '6',\n    title: 'Design the user profile page',\n    description: 'Create a responsive and user-friendly profile page layout.',\n    completed: false,\n    createdAt: '2023-10-06T15:00:00Z',\n    updatedAt: '2023-10-06T15:00:00Z',\n    dueDate: '2023-10-30',\n    priority: 'low'\n  }\n];", "fullPath": "src/data/tasks.ts"},
    "src/components/Header.tsx": {"name": "Header.tsx", "type": "file", "contents": "import { motion } from 'framer-motion';\nimport { Search, Bell, User, LogOut } from 'lucide-react';\nimport { User as UserType } from '../types';\n\ninterface HeaderProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n  completedTasks: number;\n  onTaskClick: () => void;\n  onAuthClick: () => void;\n  user: UserType | null;\n}\n\nexport function Header({\n  searchQuery,\n  onSearchChange,\n  completedTasks,\n  onTaskClick,\n  onAuthClick,\n  user\n}: HeaderProps) {\n  return (\n    <motion.header\n      initial={{ y: -80 }}\n      animate={{ y: 0 }}\n      transition={{ duration: 0.5 }}\n      className=\"sticky top-0 z-50 bg-white shadow-sm border-b border-gray-200\"\n    >\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <motion.div\n            whileHover={{ scale: 1.05 }}\n            className=\"flex items-center space-x-2\"\n          >\n            <div className=\"w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">T</span>\n            </div>\n            <h1 className=\"text-xl font-bold text-gray-900\">TaskManager</h1>\n          </motion.div>\n          \n          <div className=\"flex-1 max-w-md mx-8\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search tasks...\"\n                value={searchQuery}\n                onChange={(e) => onSearchChange(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <motion.button\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={onTaskClick}\n              className=\"relative p-2 text-gray-600 hover:text-primary-600 transition-colors\"\n            >\n              <Bell className=\"w-6 h-6\" />\n              {completedTasks > 0 && (\n                <motion.span\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  className=\"absolute -top-1 -right-1 bg-primary-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\"\n                >\n                  {completedTasks}\n                </motion.span>\n              )}\n            </motion.button>\n            \n            {user ? (\n              <div className=\"flex items-center space-x-2\">\n                <img\n                  src={user.avatar || 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'}\n                  alt={user.name}\n                  className=\"w-8 h-8 rounded-full\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">{user.name}</span>\n                <button\n                  onClick={() => {}}\n                  className=\"p-1 text-gray-400 hover:text-gray-600\"\n                >\n                  <LogOut className=\"w-4 h-4\" />\n                </button>\n              </div>\n            ) : (\n              <motion.button\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={onAuthClick}\n                className=\"p-2 text-gray-600 hover:text-primary-600 transition-colors\"\n              >\n                <User className=\"w-6 h-6\" />\n              </motion.button>\n            )}\n          </div>\n        </div>\n      </div>\n    </motion.header>\n  );\n}", "fullPath": "src/components/Header.tsx"},
    "src/components/TaskList.tsx": {"name": "TaskList.tsx", "type": "file", "contents": "import { motion } from 'framer-motion';\nimport { useQuery } from '@tanstack/react-query';\nimport { tasks } from '../data/tasks';\nimport { TaskCard } from './TaskCard';\nimport { LoadingSpinner } from './LoadingSpinner';\n\ninterface TaskListProps {\n  searchQuery: string;\n}\n\nexport function TaskList({ searchQuery }: TaskListProps) {\n  const { data: filteredTasks, isLoading } = useQuery({\n    queryKey: ['tasks', searchQuery],\n    queryFn: async () => {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      if (!searchQuery) return tasks;\n      \n      return tasks.filter(task =>\n        task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        task.description.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    },\n    staleTime: 2 * 60 * 1000\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (!filteredTasks || filteredTasks.length === 0) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"text-center py-12\"\n      >\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n          No tasks found\n        </h3>\n        <p className=\"text-gray-600\">\n          Try adjusting your search terms or create a new task.\n        </p>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\"\n    >\n      {filteredTasks.map((task, index) => (\n        <motion.div\n          key={task.id}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: index * 0.1 }}\n        >\n          <TaskCard task={task} />\n        </motion.div>\n      ))}\n    </motion.div>\n  );\n}", "fullPath": "src/components/TaskList.tsx"},
    "src/components/TaskCard.tsx": {"name": "TaskCard.tsx", "type": "file", "contents": "import { motion } from 'framer-motion';\nimport { Check, Trash } from 'lucide-react';\nimport { Task } from '../types';\nimport { useTaskStore } from '../store/taskStore';\n\ninterface TaskCardProps {\n  task: Task;\n}\n\nexport function TaskCard({ task }: TaskCardProps) {\n  const { completeTask, deleteTask } = useTaskStore();\n\n  return (\n    <motion.div\n      whileHover={{ y: -5, scale: 1.02 }}\n      transition={{ duration: 0.3 }}\n      className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-300\"\n    >\n      <div className=\"p-4\">\n        <h3 className=\"font-semibold text-gray-900 mb-1 line-clamp-2\">\n          {task.title}\n        </h3>\n        \n        <p className=\"text-sm text-gray-600 mb-2 line-clamp-3\">\n          {task.description}\n        </p>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-500\">\n            {new Date(task.dueDate!).toLocaleDateString()}\n          </span>\n          \n          <div className=\"flex items-center space-x-2\">\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => completeTask(task.id)}\n              className={`p-2 rounded-full transition-all duration-200 ${\n                task.completed\n                  ? 'bg-green-500 text-white hover:bg-green-600'\n                  : 'bg-gray-200 text-gray-600 hover:bg-gray-300'\n              }`}\n            >\n              <Check className=\"w-5 h-5\" />\n            </motion.button>\n            \n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => deleteTask(task.id)}\n              className=\"p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-all duration-200\"\n            >\n              <Trash className=\"w-5 h-5\" />\n            </motion.button>\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n}", "fullPath": "src/components/TaskCard.tsx"},
    "src/components/TaskDrawer.tsx": {"name": "TaskDrawer.tsx", "type": "file", "contents": "import { motion, AnimatePresence } from 'framer-motion';\nimport { X, Plus, Minus } from 'lucide-react';\nimport { useTaskStore } from '../store/taskStore';\nimport { useAuthStore } from '../store/authStore';\nimport { Task } from '../types';\n\ninterface TaskDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function TaskDrawer({ isOpen, onClose }: TaskDrawerProps) {\n  const { tasks, addTask, updateTask, deleteTask, completeTask } = useTaskStore();\n  const { user } = useAuthStore();\n  const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [dueDate, setDueDate] = useState('');\n  const [priority, setPriority] = useState<'low' | 'medium' | 'high'>('medium');\n\n  useEffect(() => {\n    if (selectedTask) {\n      setTitle(selectedTask.title);\n      setDescription(selectedTask.description);\n      setDueDate(selectedTask.dueDate || '');\n      setPriority(selectedTask.priority || 'medium');\n    } else {\n      setTitle('');\n      setDescription('');\n      setDueDate('');\n      setPriority('medium');\n    }\n  }, [selectedTask]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (selectedTask) {\n      updateTask(selectedTask.id, { title, description, dueDate, priority });\n    } else {\n      addTask({ title, description, dueDate, priority });\n    }\n    \n    onClose();\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n          />\n          \n          <motion.div\n            initial={{ x: '100%' }}\n            animate={{ x: 0 }}\n            exit={{ x: '100%' }}\n            transition={{ type: 'spring', damping: 25 }}\n            className=\"fixed right-0 top-0 h-full w-96 bg-white shadow-xl z-50 flex flex-col\"\n          >\n            <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                {selectedTask ? 'Edit Task' : 'New Task'}\n              </h2>\n              <button\n                onClick={onClose}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <X className=\"w-5 h-5 text-gray-500\" />\n              </button>\n            </div>\n            \n            <div className=\"flex-1 overflow-y-auto p-4\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Task Title\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                    placeholder=\"Enter task title\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Description\n                  </label>\n                  <textarea\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                    placeholder=\"Enter task description\"\n                    rows=\"3\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Due Date\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={dueDate}\n                      onChange={(e) => setDueDate(e.target.value)}\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Priority\n                    </label>\n                    <select\n                      value={priority}\n                      onChange={(e) => setPriority(e.target.value as 'low' | 'medium' | 'high')}\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                    >\n                      <option value=\"low\">Low</option>\n                      <option value=\"medium\">Medium</option>\n                      <option value=\"high\">High</option>\n                    </select>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end space-x-2\">\n                  <motion.button\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    type=\"submit\"\n                    className=\"btn-primary px-4 py-2 rounded-lg font-medium\"\n                  >\n                    {selectedTask ? 'Update Task' : 'Add Task'}\n                  </motion.button>\n                  \n                  <motion.button\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => {\n                      if (selectedTask) {\n                        deleteTask(selectedTask.id);\n                        onClose();\n                      }\n                    }}\n                    className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${\n                      selectedTask\n                        ? 'bg-red-500 text-white hover:bg-red-600'\n                        : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                    }`}\n                    disabled={!selectedTask}\n                  >\n                    Delete Task\n                  </motion.button>\n                </div>\n              </form>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n}", "fullPath": "src/components/TaskDrawer.tsx"},
    "src/components/AuthModal.tsx": {"name": "AuthModal.tsx", "type": "file", "contents": "import { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, Mail, Lock, User } from 'lucide-react';\nimport { useAuthStore } from '../store/authStore';\nimport { LoadingSpinner } from './LoadingSpinner';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AuthModal({ isOpen, onClose }: AuthModalProps) {\n  const [isLogin, setIsLogin] = useState(true);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const { login, register, isLoading } = useAuthStore();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      if (isLogin) {\n        await login(email, password);\n      } else {\n        await register(email, password, name);\n      }\n      onClose();\n    } catch (error) {\n      console.error('Auth error:', error);\n    }\n  };\n\n  const resetForm = () => {\n    setEmail('');\n    setPassword('');\n    setName('');\n  };\n\n  const switchMode = () => {\n    setIsLogin(!isLogin);\n    resetForm();\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\"\n          />\n          \n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            transition={{ duration: 0.2 }}\n            className=\"fixed inset-0 z-50 flex items-center justify-center p-4\"\n          >\n            <div className=\"bg-white rounded-xl shadow-xl w-full max-w-md p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900\">\n                  {isLogin ? 'Sign In' : 'Create Account'}\n                </h2>\n                <button\n                  onClick={onClose}\n                  className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                >\n                  <X className=\"w-5 h-5 text-gray-500\" />\n                </button>\n              </div>\n              \n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                {!isLogin && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Full Name\n                    </label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                      <input\n                        type=\"text\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                        placeholder=\"Enter your full name\"\n                        required={!isLogin}\n                      />\n                    </div>\n                  </div>\n                )}\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Email Address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                    <input\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                      placeholder=\"Enter your email\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                    <input\n                      type=\"password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                      placeholder=\"Enter your password\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                {isLogin && (\n                  <p className=\"text-sm text-gray-600\">\n                    Demo credentials: email: demo@example.com, password: password\n                  </p>\n                )}\n                \n                <motion.button\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"w-full btn-primary py-3 flex items-center justify-center space-x-2\"\n                >\n                  {isLoading ? (\n                    <LoadingSpinner size=\"sm\" />\n                  ) : (\n                    <span>{isLogin ? 'Sign In' : 'Create Account'}</span>\n                  )}\n                </motion.button>\n              </form>\n              \n              <div className=\"mt-6 text-center\">\n                <p className=\"text-sm text-gray-600\">\n                  {isLogin ? \"Don't have an account?\" : \"Already have an account?\"}\n                  <button\n                    onClick={switchMode}\n                    className=\"ml-1 text-primary-600 hover:text-primary-700 font-medium\"\n                  >\n                    {isLogin ? 'Sign up' : 'Sign in'}\n                  </button>\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n}", "fullPath": "src/components/AuthModal.tsx"},
    "src/components/LoadingSpinner.tsx": {"name": "LoadingSpinner.tsx", "type": "file", "contents": "import { motion } from 'framer-motion';\n\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n  color?: string;\n}\n\nexport function LoadingSpinner({ size = 'md', color = 'text-primary-600' }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-6 h-6',\n    lg: 'w-8 h-8'\n  };\n\n  return (\n    <motion.div\n      animate={{ rotate: 360 }}\n      transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n      className={`${sizeClasses[size]} ${color} border-2 border-current border-t-transparent rounded-full`}\n    />\n  );\n}", "fullPath": "src/components/LoadingSpinner.tsx"},
    "src/hooks/useLocalStorage.ts": {"name": "useLocalStorage.ts", "type": "file", "contents": "import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.newValue) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.error(`Error parsing localStorage key \"${key}\":`, error);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [key]);\n\n  return [storedValue, setValue] as const;\n}", "fullPath": "src/hooks/useLocalStorage.ts"},
    "src/utils/formatters.ts": {"name": "formatters.ts", "type": "file", "contents": "export function formatPrice(price: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(price);\n}\n\nexport function formatDate(date: Date): string {\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  }).format(date);\n}\n\nexport function formatRating(rating: number): string {\n  return rating.toFixed(1);\n}\n\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trimEnd() + '...';\n}\n\nexport function slugify(text: string): string {\n  return text\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .trim();\n}", "fullPath": "src/utils/formatters.ts"}
  }
}
